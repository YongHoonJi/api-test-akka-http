/*
 * This file is generated by jOOQ.
*/
package com.jooq.test.domain.tables;


import com.jooq.test.domain.Indexes;
import com.jooq.test.domain.Keys;
import com.jooq.test.domain.TestTemp;
import com.jooq.test.domain.tables.records.UserRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 2049533798;

    /**
     * The reference instance of <code>test_temp.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>test_temp.user.user_id</code>. 순번
     */
    public final TableField<UserRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "순번");

    /**
     * The column <code>test_temp.user.account</code>. 계정
     */
    public final TableField<UserRecord, String> ACCOUNT = createField("account", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "계정");

    /**
     * The column <code>test_temp.user.active_yn</code>. 사용여부
     */
    public final TableField<UserRecord, String> ACTIVE_YN = createField("active_yn", org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "사용여부");

    /**
     * The column <code>test_temp.user.create_dttm</code>. 생성일시
     */
    public final TableField<UserRecord, Timestamp> CREATE_DTTM = createField("create_dttm", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "생성일시");

    /**
     * The column <code>test_temp.user.dept</code>. 부서
     */
    public final TableField<UserRecord, String> DEPT = createField("dept", org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "부서");

    /**
     * The column <code>test_temp.user.email</code>. 이메일
     */
    public final TableField<UserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "이메일");

    /**
     * The column <code>test_temp.user.name</code>. 이름
     */
    public final TableField<UserRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "이름");

    /**
     * The column <code>test_temp.user.password</code>. 패스워드
     */
    public final TableField<UserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false), this, "패스워드");

    /**
     * The column <code>test_temp.user.role</code>. 권한
     */
    public final TableField<UserRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "권한");

    /**
     * The column <code>test_temp.user.update_dttm</code>. 수정일시
     */
    public final TableField<UserRecord, Timestamp> UPDATE_DTTM = createField("update_dttm", org.jooq.impl.SQLDataType.TIMESTAMP, this, "수정일시");

    /**
     * Create a <code>test_temp.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>test_temp.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>test_temp.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return TestTemp.TEST_TEMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PRIMARY, Indexes.USER_UK_DNQ7R8JCMLFT7L8L4J79L1H74, Indexes.USER_UK_OB8KQYQQGMEFL0ACO34AKDTPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY, Keys.KEY_USER_UK_DNQ7R8JCMLFT7L8L4J79L1H74, Keys.KEY_USER_UK_OB8KQYQQGMEFL0ACO34AKDTPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }
}
